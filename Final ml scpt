
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import (
    precision_score, accuracy_score, classification_report,
    confusion_matrix, ConfusionMatrixDisplay, roc_curve, auc
)
from sklearn.inspection import permutation_importance
from sklearn.decomposition import PCA

# Seed and date setup
np.random.seed(42)
dates = pd.date_range(start="2019-01-31", end="2024-12-31", freq="M")
n_months = len(dates)

# Simulate strategy returns
returns = pd.DataFrame({
    "Date": dates,
    "Baseline": np.random.normal(0.0065, 0.04, n_months),
    "Logistic": np.random.normal(0.0105, 0.037, n_months),
    "DecisionTree": np.random.normal(0.012, 0.037, n_months),
    "RandomForest": np.random.normal(0.015, 0.038, n_months)
})
returns.set_index("Date", inplace=True)

# Cumulative returns
cumulative = (1 + returns).cumprod()
cumulative.plot(figsize=(12, 6), title="Cumulative Returns (2019â€“2024)")
plt.xlabel("Date")
plt.ylabel("Growth of $1")
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.savefig("cumulative_returns.png")

# Summary stats
summary_stats = returns.aggregate(['mean', 'std']).T
summary_stats['Annual Return (%)'] = (1 + summary_stats['mean'])**12 - 1
summary_stats['Volatility (%)'] = summary_stats['std'] * np.sqrt(12)
summary_stats['Sharpe Ratio'] = summary_stats['mean'] / summary_stats['std'] * np.sqrt(12)
summary_stats['Max Drawdown (%)'] = returns.apply(
    lambda x: ((1 + x).cumprod() / (1 + x).cumprod().cummax() - 1).min()
) * 100
summary_stats.to_csv("summary_stats.csv")

# Fama-French + UMD factors
factors = pd.DataFrame({
    'Mkt': np.random.normal(0.005, 0.02, n_months),
    'SMB': np.random.normal(0.002, 0.015, n_months),
    'HML': np.random.normal(0.0015, 0.014, n_months),
    'RMW': np.random.normal(0.002, 0.013, n_months),
    'CMA': np.random.normal(0.001, 0.012, n_months),
    'UMD': np.random.normal(0.003, 0.018, n_months)
}, index=returns.index)

# Factor regression
excess_returns = returns.subtract(0)
results = {}
for col in excess_returns.columns:
    X = sm.add_constant(factors)
    y = excess_returns[col]
    results[col] = sm.OLS(y, X).fit()
regression_summary = pd.DataFrame({
    "Alpha": [m.params['const'] * 12 for m in results.values()],
    "t-stat": [m.tvalues['const'] for m in results.values()]
}, index=results.keys())
regression_summary.to_csv("factor_regression_summary.csv")

# Labels and features for classification
median_returns = returns.median(axis=1)
labels = returns['RandomForest'] > median_returns
features = returns[['Baseline', 'Logistic', 'DecisionTree']]
split = int(0.8 * len(features))
X_train, X_test = features[:split], features[split:]
y_train, y_test = labels[:split], labels[split:]

# Random forest classification
clf = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=42)
clf.fit(X_train, y_train)
y_pred = clf.predict(X_test)
report = classification_report(y_test, y_pred, output_dict=True)
pd.DataFrame(report).T.to_csv("classification_report.csv")

# Permutation importance
perm = permutation_importance(clf, X_test, y_test, n_repeats=10, random_state=42)
perm_df = pd.DataFrame({
    'Feature': features.columns,
    'Importance Mean': perm.importances_mean,
    'Importance Std': perm.importances_std
}).sort_values(by='Importance Mean', ascending=False)
perm_df.to_csv("permutation_importance.csv")

# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Underperform', 'Outperform'])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.tight_layout()
plt.savefig("confusion_matrix.png")

# ROC curve
y_proba = clf.predict_proba(X_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_proba)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, label=f"AUC = {roc_auc:.2f}")
plt.plot([0, 1], [0, 1], linestyle='--')
plt.title("ROC Curve")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.legend()
plt.tight_layout()
plt.savefig("roc_curve.png")

# PCA of strategy returns
pca = PCA(n_components=2)
components = pca.fit_transform(returns[['Logistic', 'DecisionTree', 'RandomForest']])
pca_df = pd.DataFrame(components, columns=["PC1", "PC2"])
pca_df['Year'] = returns.index.year
plt.figure(figsize=(8, 6))
sns.scatterplot(data=pca_df, x="PC1", y="PC2", hue="Year", palette="coolwarm", s=50)
plt.title("PCA of Strategy Returns")
plt.tight_layout()
plt.savefig("pca_strategies.png")
